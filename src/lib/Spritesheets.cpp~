#include "Spritesheets.hpp"
#include "Lib.hpp"
#include <SDL2/SDL_image.h>
#include <SDL2/SDL_rect.h>
#include <SDL2/SDL_render.h>
#include <SDL2/SDL_surface.h>
#include <cstddef>
#include <iostream>
#include <string>
#include <unordered_map>

namespace Engen {

std::unordered_map<std::string, SheetData> SpriteSheet::sheets_;

void Sprite::render(SDL_Renderer* renderer, int x, int y) const {
    SDL_Rect dest;
    dest.x = x - src.w / 2;  // center on x
    dest.y = y - src.h / 2; // center on y
    dest.w = src.w;
    dest.h = src.h;

    SDL_RenderCopy(renderer, texture, &src, &dest);
}
void SpriteSheet::InitSheet(SDL_Renderer *renderer, const std::string path,
                            int spriteW, int spriteH, const std::string name) {
  SDL_Surface *surface = IMG_Load(path.c_str());
  if (!surface) {
    std::cerr << "error unable to load image \n";
    return;
  }
  SDL_Texture *texture = SDL_CreateTextureFromSurface(renderer, surface);
  SDL_FreeSurface(surface);
  if (!texture) {
    std::cerr << "error unable to make texture \n";
    return;
  }
  sheets_[name] = {.texture = texture, .spriteW = spriteW, .spriteH = spriteH};
}
Sprite SpriteSheet::getSptire(const std::string sheetName, int x, int y) {
  auto it = sheets_.find(sheetName);
  SheetData &data = it->second;

  SDL_Rect rect = {.x = x * data.spriteW,
                   .y = y * data.spriteH,
                   .w = data.spriteW,
                   .h = data.spriteH};
  return Sprite(data.texture, rect);
}

} // namespace Engen
