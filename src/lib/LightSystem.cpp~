#include "LightSystem.hpp"
#include <SDL2/SDL.h>
#include <cmath>

namespace Engen {

SDL_Texture* LightSystem::LightTexture = nullptr;
TopLayer* LightSystem::TargetLayer = nullptr;

void LightSystem::Init(TopLayer* layer) {
  TargetLayer = layer;

  SDL_Renderer* renderer = layer->GetRenderer();
  SDL_Texture* texture = SDL_CreateTexture(
      renderer,
      SDL_PIXELFORMAT_RGBA8888,
      SDL_TEXTUREACCESS_TARGET,
      layer->Width(),
      layer->Height()
  );

  if (!texture) {
    SDL_Log("Failed to create light texture: %s", SDL_GetError());
    return;
  }

  SDL_SetTextureBlendMode(texture, SDL_BLENDMODE_ADD);
  LightTexture = texture;
}

void LightSystem::Clear(int ambientLight) {
  SDL_SetRenderTarget(TargetLayer->GetRenderer(), LightTexture);
  SDL_SetRenderDrawColor(TargetLayer->GetRenderer(),
                         ambientLight, ambientLight, ambientLight, 255);
  SDL_RenderClear(TargetLayer->GetRenderer());
}

void LightSystem::addLightSrc(Vec2 center, int radius,
                              int falloff, const SDL_Color color) {
  SDL_Renderer* renderer = TargetLayer->GetRenderer();

  // Simple radial gradient
  for (int r = radius; r > 0; r--) {
    float intensity = 1.0f - (float)(radius - r) / falloff;
    if (intensity < 0.0f) break;

    SDL_SetRenderDrawColor(renderer,
                           (Uint8)(color.r * intensity),
                           (Uint8)(color.g * intensity),
                           (Uint8)(color.b * intensity),
                           (Uint8)(color.a * intensity));

    for (int angle = 0; angle < 360; angle += 5) {
      int x = center.x + (int)(cos(angle * M_PI / 180.0) * r);
      int y = center.y + (int)(sin(angle * M_PI / 180.0) * r);
      SDL_RenderDrawPoint(renderer, x, y);
    }
  }
}

void LightSystem::Render(SDL_Renderer* renderer) {
  SDL_SetRenderTarget(renderer, nullptr);
  SDL_RenderCopy(renderer, LightTexture, nullptr, nullptr);
}

} // namespace Engen
